kind: Template
apiVersion: template.openshift.io/v1
label:
  app: forms-flow-ai
metadata:
  name: "${NAME}-${TAG_NAME}-deploy"
objects:
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: "${NAME}-${TAG_NAME}"
    labels:
      app: "${NAME}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  spec:
    replicas: 1
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
        pre:
          failurePolicy: Abort
          execNewPod:
            command:
            - "/opt/app-root/pre-hook-update-db.sh"
            env:
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                  key: database-user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                  key: 'database-password'
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                  key: database-name
            - name: DATABASE_HOST
              value: "${DATABASE_NAME}-${TAG_NAME}"
            - name: DATABASE_PORT
              value: '5432'
            containerName: "${NAME}-${TAG_NAME}"
#    triggers:
#    - type: ImageChange
#      imageChangeParams:
#        automatic: true
#        containerNames:
#        - "${NAME}-${TAG_NAME}"
#        from:
#          kind: ImageStreamTag
#          namespace: "${IMAGE_NAMESPACE}"
#          name: "${NAME}:${TAG_NAME}"
    - type: ConfigChange
    test: false
    selector:
      app: "${NAME}-${TAG_NAME}"
      deploymentconfig: "${NAME}-${TAG_NAME}"
    template:
      metadata:
        labels:
          app: "${NAME}-${TAG_NAME}"
          app-group: "${APP_GROUP}"
          deploymentconfig: "${NAME}-${TAG_NAME}"
          template: "${NAME}-deploy"
      spec:
        containers:
        - name: "${NAME}-${TAG_NAME}"
          image: "${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${NAME}:${TAG_NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                key: database-user
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                key: database-password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_NAME}-${TAG_NAME}-secret"
                key: database-name
          - name: DATABASE_HOST
            value: "${DATABASE_NAME}-${TAG_NAME}"
          - name: DATABASE_PORT
            value: '5432'
          - name: JWT_OIDC_WELL_KNOWN_CONFIG
            valueFrom:
              configMapKeyRef:
                name: "${NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_WELL_KNOWN_CONFIG
          - name: JWT_OIDC_ALGORITHMS
            valueFrom:
              configMapKeyRef:
                name: "${NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_ALGORITHMS
          - name: JWT_OIDC_JWKS_URI
            valueFrom:
              configMapKeyRef:
                name: "${NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_JWKS_URI
          - name: JWT_OIDC_ISSUER
            valueFrom:
              configMapKeyRef:
                name: "${NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_ISSUER
          - name: JWT_OIDC_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: "${NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_AUDIENCE
          - name: JWT_OIDC_CLIENT_SECRET
            value: ''
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          livenessProbe:
            httpGet:
              path: "/ops/healthz"
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/ops/readyz"
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${NAME}-${TAG_NAME}-config"
  data:
    JWT_OIDC_WELL_KNOWN_CONFIG: ''
    JWT_OIDC_ALGORITHMS: RS256
    JWT_OIDC_JWKS_URI: ''
    JWT_OIDC_ISSUER: ''
    JWT_OIDC_AUDIENCE: forms-flow-web
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}-${TAG_NAME}"
    creationTimestamp:
    labels:
      app: "${NAME}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  spec:
    ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: "${NAME}-${TAG_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${NAME}-${TAG_NAME}"
    labels:
      app: "${NAME}-${TAG_NAME}"
      app-group: "${APP_GROUP}"
      template: "${NAME}-deploy"
  spec:
    host: eao-reports.apps.devops.aot-technologies.com
    to:
      kind: Service
      name: "${NAME}-${TAG_NAME}"
      weight: 100
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    wildcardPolicy: None
  status:
    ingress:
    - host: eao-reports.apps.devops.aot-technologies.com
      routerName: router
      conditions:
      - type: Admitted
        status: 'True'
      wildcardPolicy: None
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the OpenShift resources associated to the
    server instance.
  required: true
  value: eao-project-reports-api
- name: APP_GROUP
  displayName: App Group
  description: The name assigned to all of the deployments in this project.
  required: true
  value: eao-project-reports
- name: IMAGE_NAMESPACE
  displayName: Image Namespace
  required: true
  description: The namespace of the OpenShift project containing the imagestream for
    the application.
#  value: eao-tools
  value: bcgov
- name: IMAGE_REGISTRY
  displayName: Image Registry
  required: true
  description: Image registry URL.
#  value: docker-registry.default.svc:5000
  value: ghcr.io
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
  value: dev
- name: DATABASE_NAME
  displayName: Database App Name
  description: A valid database app name used by the service.
  required: true
  value: postgresql
- name: CPU_REQUEST
  displayName: Resources CPU Request
  description: The resources CPU request (in cores) for this build.
  required: true
  value: 100m
- name: CPU_LIMIT
  displayName: Resources CPU Limit
  description: The resources CPU limit (in cores) for this build.
  required: true
  value: 750m
- name: MEMORY_REQUEST
  displayName: Resources Memory Request
  description: The resources Memory request (in Mi, Gi, etc) for this build.
  required: true
  value: 100Mi
- name: MEMORY_LIMIT
  displayName: Resources Memory Limit
  description: The resources Memory limit (in Mi, Gi, etc) for this build.
  required: true
  value: 2Gi
- name: REPLICAS
  displayName: The number of replicas to run
  description: The number of replicas to run in this environment.
  required: true
  value: '1'
