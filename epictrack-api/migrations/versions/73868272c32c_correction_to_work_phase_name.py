"""correction to work phase name

Revision ID: 73868272c32c
Revises: eb68451694da
Create Date: 2024-01-31 13:36:22.419454

"""
import sqlalchemy as sa
from alembic import op

from api.models.work_phase import WorkPhase
from api.models.work_type import WorkTypeEnum


# revision identifiers, used by Alembic.
revision = "73868272c32c"
down_revision = "eb68451694da"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    tables = WorkPhase.metadata.tables
    work_phase_table = tables["work_phases"]
    replace_func = sa.func.regexp_replace(
        work_phase_table.c.name,  # column
        "EAC Assessment Intake",  # str to replace
        "Pre-Early Engagement",  # str to replace with
    )
    op.execute(
        work_phase_table.update()
        .values({work_phase_table.c.name: replace_func})
        .where(work_phase_table.c.name.ilike(r"%EAC Assessment Intake%"))
    )
    conn = op.get_bind()
    phase_query = f"SELECT id FROM phase_codes WHERE name = 'Amendment Procedures' and work_type_id={WorkTypeEnum.AMENDMENT.value}"
    phase = conn.execute(sa.text(phase_query)).fetchone()
    if phase:
        # To avoid test case failing because event templates for amendment are not configured
        work_phases_query = f"SELECT id from work_phases WHERE phase_id = {phase.id}"
        work_phases = conn.execute(sa.text(work_phases_query)).scalars().all()
        event_configuration_table = tables["event_configurations"]
        replace_func = sa.func.regexp_replace(
            event_configuration_table.c.name, "Assessment", "Amendment"
        )
        op.execute(
            event_configuration_table.update()
            .values({event_configuration_table.c.name: replace_func})
            .where(
                event_configuration_table.c.name.ilike(r"%assessment%"),
                event_configuration_table.c.work_phase_id.in_(work_phases),
            )
        )
        if len(work_phases) > 0:
            event_query = f"SELECT id FROM event_configurations WHERE work_phase_id in ({','.join([str(phase) for phase in work_phases])})"
            event_configurations = conn.execute(sa.text(event_query)).scalars().all()
            events = tables["events"]
            replace_func = sa.func.regexp_replace(
                events.c.name, "Assessment", "Amendment"
            )
            op.execute(
                events.update()
                .values({events.c.name: replace_func})
                .where(
                    events.c.name.ilike(r"%assessment%"),
                    events.c.event_configuration_id.in_(event_configurations),
                )
            )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
