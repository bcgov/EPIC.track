"""template_related_fixes

Revision ID: 498c9e7f50b6
Revises: 735a693b4a59
Create Date: 2024-02-27 06:54:20.648709

"""
from alembic import op
import sqlalchemy as sa
import json
from api.models.phase_code import PhaseCode


# revision identifiers, used by Alembic.
revision = '498c9e7f50b6'
down_revision = '735a693b4a59'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # this is to change the change of name in phase in phase codes as well
    # or else when you upload the template excel with this change, the existing
    # EAC Assessment Intake phase will get deactivated, which cause the referenced
    # phase_id in work_phases table incorrect
    tables = PhaseCode.metadata.tables
    phase_code_table = tables["phase_codes"]
    replace_func = sa.func.regexp_replace(
        phase_code_table.c.name,  # column
        "EAC Assessment Intake",  # str to replace
        "Pre-Early Engagement",  # str to replace with
    )
    op.execute(
        phase_code_table.update()
        .values({phase_code_table.c.name: replace_func})
        .where(phase_code_table.c.name.ilike(r"%EAC Assessment Intake%"))
    )
    # Rename the amendment procedure events
    event_template_table = tables["event_templates"]
    names_to_be_changed = ["Assessment Procedures Posted","Assessment Procedures Posted Announcement & Tweet", "Assessment Procedures Posted Milestone Bullet"]
    for name in names_to_be_changed:
        replace_func = sa.func.regexp_replace(
            event_template_table.c.name,  # column
            name,  # str to replace
            name.replace("Assessment", "Amendment"),  # str to replace with
        )
        op.execute(
            event_template_table.update()
            .values({event_template_table.c.name: replace_func})
            .where(
                sa.and_(
                    event_template_table.c.name == name,
                    event_template_table.c.is_active.is_(True),
                )
            )
        )
    conn = op.get_bind()
    # becuase of the template name change, few template_ids already mapped to configurations
    # are now invalid
    old_template_names = names_to_be_changed
    for old_name in old_template_names:
        template_query = f"SELECT id FROM event_templates WHERE name='{old_name}' and is_active=false"
        old_template = conn.execute(sa.text(template_query)).fetchone()
        if old_template:
            new_template_name = old_name.replace("Assessment", "Amendment")
            new_template_query = f"SELECT id from event_templates WHERE name='{new_template_name}'"
            new_template = conn.execute(sa.text(new_template_query)).fetchone()
            op.execute(f"UPDATE event_configurations SET template_id={new_template.id} WHERE template_id={old_template.id}")

    old_pre_early_phase_query = "select id from phase_codes where name='Pre-Early Engagement' and is_active=false"
    old_pre_early_phase = conn.execute(sa.text(old_pre_early_phase_query)).fetchone()
    new_pre_early_phase_query = "select id from phase_codes where name='Pre-Early Engagement' and is_active=true"
    new_pre_early_phase = conn.execute(sa.text(new_pre_early_phase_query)).fetchone()
    if old_pre_early_phase:
        old_pre_early_templates_query = f"select id,name from event_templates where phase_id={old_pre_early_phase.id} and is_active=false"
        old_pre_early_templates = conn.execute(sa.text(old_pre_early_templates_query)).all()
        if len(old_pre_early_templates) > 0:
            for old_pre_early_template in old_pre_early_templates:
                print(f"old_template: {old_pre_early_template.name}")
                old_pre_early_template_name = old_pre_early_template.name.replace("EAC Assessment Intake", "Pre-Early Engagement")
                new_template_query = f"select id,name from event_templates where name='{old_pre_early_template_name}' and phase_id={new_pre_early_phase.id} and is_active=true"
                new_template = conn.execute(sa.text(new_template_query)).fetchone()
                print(f"new_template: {new_template.name}")
                op.execute(f"update event_configurations set template_id={new_template.id} where template_id={old_pre_early_template.id}")
    # This is to just double confirm and make sure the the correct phase_id will be
    # referred in the work_phase table from the phase_codes
    phase_query = "SELECT id FROM phase_codes WHERE name='Pre-Early Engagement' and is_active=true"
    phase = conn.execute(sa.text(phase_query)).fetchone()
    if phase:
        work_phase_query = f"UPDATE work_phases SET phase_id={phase.id} WHERE name='Pre-Early Engagement'"
        op.execute(work_phase_query)
    with op.batch_alter_table('action_configurations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('action_template_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'action_templates', ['action_template_id'], ['id'])

    with op.batch_alter_table('action_configurations_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('action_template_id', sa.Integer(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(None, 'action_templates', ['action_template_id'], ['id'])

    with op.batch_alter_table('outcome_configurations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('outcome_template_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'outcome_templates', ['outcome_template_id'], ['id'])

    with op.batch_alter_table('outcome_configurations_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('outcome_template_id', sa.Integer(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(None, 'outcome_templates', ['outcome_template_id'], ['id'])
    configurations = conn.execute(sa.text("SELECT id, template_id FROM event_configurations where is_active=true")).all()
    if len(configurations):
        for config in configurations:
            outcome_templates = conn.execute(sa.text(f"SELECT id, sort_order, name FROM outcome_templates WHERE event_template_id={config.template_id}")).all()
            outcome_configurations = conn.execute(sa.text(f"SELECT id, sort_order, name FROM outcome_configurations WHERE event_configuration_id={config.id}")).all()
            for outcome_config in outcome_configurations:
                matched_outcome_template = next(iter([outcome for outcome in outcome_templates if outcome.name == outcome_config.name and outcome.sort_order == outcome_config.sort_order]), None)
                op.execute(f"UPDATE outcome_configurations SET outcome_template_id={matched_outcome_template.id} WHERE id={outcome_config.id}")
                action_templates = conn.execute(sa.text(f"SELECT id, sort_order, additional_params FROM action_templates WHERE outcome_id={matched_outcome_template.id}")).all()
                action_configurations = conn.execute(sa.text(f"SELECT id, sort_order, additional_params FROM action_configurations WHERE outcome_configuration_id={outcome_config.id}")).all()
                for action_config in action_configurations:
                    matched_action_template = next(iter([action for action in action_templates if action.sort_order == action_config.sort_order]), None)
                    if matched_action_template:
                        additional_params = json.dumps(matched_action_template.additional_params).replace("'", "''")
                        op.execute(f"UPDATE action_configurations SET additional_params='{additional_params}', action_template_id={matched_action_template.id} WHERE id = {action_config.id}")
                    else:
                        print(f"Action configuration Id {action_config.id}")
                        print(f"Event configuration Id {config.id}")
                        print(f"Outcome template Id {matched_outcome_template.id}")
                        print(f"Template Id {config.template_id}")
                        print("Templates")
                        for t in action_templates:
                            print(f"{t.id} {t.sort_order}")
                        print("Configurations")
                        for c in action_configurations:
                            print(f"{c.id} {c.sort_order}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('outcome_configurations_history', schema=None) as batch_op:
        batch_op.drop_constraint('outcome_configurations_history_outcome_template_id_fkey', type_='foreignkey')
        batch_op.drop_column('outcome_template_id')

    with op.batch_alter_table('outcome_configurations', schema=None) as batch_op:
        batch_op.drop_constraint('outcome_configurations_outcome_template_id_fkey', type_='foreignkey')
        batch_op.drop_column('outcome_template_id')


    with op.batch_alter_table('action_configurations_history', schema=None) as batch_op:
        batch_op.drop_constraint('action_configurations_history_action_template_id_fkey', type_='foreignkey')
        batch_op.drop_column('action_template_id')

    with op.batch_alter_table('action_configurations', schema=None) as batch_op:
        batch_op.drop_constraint('action_configurations_action_template_id_fkey', type_='foreignkey')
        batch_op.drop_column('action_template_id')

    # ### end Alembic commands ###
