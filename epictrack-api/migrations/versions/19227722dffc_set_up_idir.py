"""set up idir

Revision ID: 19227722dffc
Revises: 87cef5c064d8
Create Date: 2024-07-17 11:32:40.595014

"""

from alembic import op
from flask import g
import sqlalchemy as sa
from sqlalchemy import text
from api.services.keycloak import KeycloakService

# revision identifiers, used by Alembic.
revision = "19227722dffc"
down_revision = "87cef5c064d8"
branch_labels = None
depends_on = None

def upgrade():
    # Adding the new column to the 'staffs' table
    with op.batch_alter_table("staffs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("idir_user_id", sa.String(length=100)))

    g.jwt_oidc_token_info = {"email": 'system'}
    # Performing the migration logic for the staff_idir_migration
    existing_staffs_query = "SELECT * FROM staffs"
    conn = op.get_bind()
    metadata = sa.MetaData()
    staff_table = sa.Table('staffs', metadata, autoload_with=conn)
    res = conn.execute(text(existing_staffs_query))

    for staff in res.fetchall():
        email = staff.email
        users = KeycloakService.get_user_by_email(email)
        idir_user_id = users[0].get('username', "")
         
        # Update the staff member's idir_user_id in the database
        if idir_user_id:
            conn.execute(
                staff_table.update().where(staff_table.c.id == staff.id)
                .values(idir_user_id=idir_user_id)
            )
    # Commit the changes to the database
    op.get_bind().commit()

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("staffs_history", schema=None) as batch_op:
        batch_op.drop_column("idir_user_id")

    with op.batch_alter_table("staffs", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="unique")
        batch_op.drop_column("idir_user_id")
    # ### end Alembic commands ###
