"""sort_order for master tables and increased char limits

Revision ID: b111bf366202
Revises: db1af3aa7e86
Create Date: 2023-02-15 12:57:38.570400

"""
import json
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "b111bf366202"
down_revision = "db1af3aa7e86"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("ea_acts", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("eao_teams", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.alter_column(
        "events",
        "short_description",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "topic",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=True,
    )
    op.add_column(
        "federal_involvements", sa.Column("sort_order", sa.Integer(), nullable=True)
    )
    op.add_column(
        "indigenous_nations", sa.Column("sort_order", sa.Integer(), nullable=True)
    )
    op.alter_column(
        "inspection_details",
        "compliance_status",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=False,
    )
    op.alter_column(
        "inspection_details",
        "requirement",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=False,
    )
    op.alter_column(
        "issues",
        "short_description",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=False,
    )
    op.add_column(
        "milestone_types", sa.Column("sort_order", sa.Integer(), nullable=True)
    )
    op.add_column("ministries", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("organizations", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("positions", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("proponents", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("regions", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("roles", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column("sub_types", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.add_column(
        "substitution_acts", sa.Column("sort_order", sa.Integer(), nullable=True)
    )
    op.add_column("types", sa.Column("sort_order", sa.Integer(), nullable=True))
    op.alter_column(
        "work_statuses",
        "status_text",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=False,
    )
    op.alter_column(
        "works",
        "short_description",
        existing_type=sa.VARCHAR(length=255),
        type_=sa.String(length=2000),
        existing_nullable=True,
    )

    tables_to_update = [
        "ea_acts",
        "eao_teams",
        "federal_involvements",
        "indigenous_nations",
        "indigenous_categories",
        "milestone_types",
        "milestones",
        "ministries",
        "organizations",
        "outcomes",
        "phase_codes",
        "positions",
        "proponents",
        "regions",
        "roles",
        "sub_types",
        "substitution_acts",
        "types",
        "work_types",
    ]
    conn = op.get_bind()
    for table in tables_to_update:
        entries = conn.execute(f"SELECT * FROM {table} ORDER BY id")
        entries = entries.fetchall()
        data = [{'id': x['id'], 'sort_order': i + 1 if x['name'] != 'Other' else 32767} for i, x in enumerate(entries)]
        op.execute(
            f"""
            UPDATE {table} set sort_order = data.sort_order FROM (
                SELECT  * FROM json_populate_recordset(null::{table},'%s')
            ) data
            WHERE {table}.id = data.id
            """ % json.dumps(data)
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "works",
        "short_description",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=True,
    )
    op.alter_column(
        "work_statuses",
        "status_text",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=False,
    )
    op.drop_column("types", "sort_order")
    op.drop_column("substitution_acts", "sort_order")
    op.drop_column("sub_types", "sort_order")
    op.drop_column("roles", "sort_order")
    op.drop_column("regions", "sort_order")
    op.drop_column("proponents", "sort_order")
    op.drop_column("positions", "sort_order")
    op.drop_column("organizations", "sort_order")
    op.drop_column("ministries", "sort_order")
    op.drop_column("milestone_types", "sort_order")
    op.alter_column(
        "issues",
        "short_description",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "inspection_details",
        "requirement",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "inspection_details",
        "compliance_status",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=False,
    )
    op.drop_column("indigenous_nations", "sort_order")
    op.drop_column("federal_involvements", "sort_order")
    op.alter_column(
        "events",
        "topic",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "short_description",
        existing_type=sa.String(length=2000),
        type_=sa.VARCHAR(length=255),
        existing_nullable=True,
    )
    op.drop_column("eao_teams", "sort_order")
    op.drop_column("ea_acts", "sort_order")
    # ### end Alembic commands ###
