"""outcome, events, event_template

Revision ID: 7e5b18bc3506
Revises: bfdf8ef58e32
Create Date: 2023-07-27 17:48:10.236989

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7e5b18bc3506'
down_revision = 'bfdf8ef58e32'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DELETE FROM events")
    op.execute("DELETE FROM outcomes")
    with op.batch_alter_table('event_templates', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parent_template_id', sa.Integer(), nullable=True))
        batch_op.alter_column('start_at',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)

    with op.batch_alter_table('event_templates_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parent_template_id', sa.Integer(), autoincrement=False, nullable=True))
        batch_op.alter_column('start_at',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False,
               autoincrement=False)

    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('phase_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('event_category_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('event_type_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('anticipated_date', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('actual_date', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('number_of_days', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('source_event_id', sa.Integer(), nullable=True))
        batch_op.drop_constraint('events_decision_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('events_milestone_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'event_categories', ['event_category_id'], ['id'])
        batch_op.create_foreign_key(None, 'phase_codes', ['phase_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_types', ['event_type_id'], ['id'])
        batch_op.drop_column('decision_information')
        batch_op.drop_column('milestone_id')
        batch_op.drop_column('explanation')
        batch_op.drop_column('end_date')
        batch_op.drop_column('start_date')
        batch_op.drop_column('is_reportable')
        batch_op.drop_column('anticipated_start_date')
        batch_op.drop_column('oh_attendance')
        batch_op.drop_column('title')
        batch_op.drop_column('decision_by_id')
        batch_op.drop_column('anticipated_end_date')
        batch_op.drop_column('topic')

    with op.batch_alter_table('events_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=255), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('phase_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('event_category_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('event_type_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('anticipated_date', sa.DateTime(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('actual_date', sa.DateTime(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('number_of_days', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('source_event_id', sa.Integer(), autoincrement=False, nullable=True))
        batch_op.drop_constraint('events_history_milestone_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('events_history_decision_by_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'phase_codes', ['phase_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_types', ['event_type_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_categories', ['event_category_id'], ['id'])
        batch_op.drop_column('decision_information')
        batch_op.drop_column('milestone_id')
        batch_op.drop_column('explanation')
        batch_op.drop_column('start_date')
        batch_op.drop_column('is_reportable')
        batch_op.drop_column('anticipated_start_date')
        batch_op.drop_column('oh_attendance')
        batch_op.drop_column('title')
        batch_op.drop_column('decision_by_id')
        batch_op.drop_column('anticipated_end_date')
        batch_op.drop_column('topic')
        batch_op.drop_column('end_date')

    with op.batch_alter_table('outcomes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('phase_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('event_type_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('event_category_id', sa.Integer(), nullable=False))
        batch_op.drop_constraint('outcomes_milestone_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'phase_codes', ['phase_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_types', ['event_type_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_categories', ['event_category_id'], ['id'])
        batch_op.drop_column('milestone_id')

    with op.batch_alter_table('outcomes_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('phase_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('event_type_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('event_category_id', sa.Integer(), autoincrement=False, nullable=False))
        batch_op.drop_constraint('outcomes_history_milestone_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'event_types', ['event_type_id'], ['id'])
        batch_op.create_foreign_key(None, 'phase_codes', ['phase_id'], ['id'])
        batch_op.create_foreign_key(None, 'event_categories', ['event_category_id'], ['id'])
        batch_op.drop_column('milestone_id')

    with op.batch_alter_table('work_calendar_events', schema=None) as batch_op:
        batch_op.add_column(sa.Column('source_event_id', sa.Integer(), nullable=True))

    with op.batch_alter_table('work_calendar_events_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('source_event_id', sa.Integer(), autoincrement=False, nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('work_calendar_events_history', schema=None) as batch_op:
        batch_op.drop_column('source_event_id')

    with op.batch_alter_table('work_calendar_events', schema=None) as batch_op:
        batch_op.drop_column('source_event_id')

    with op.batch_alter_table('outcomes_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('outcomes_history_milestone_id_fkey', 'milestones', ['milestone_id'], ['id'])
        batch_op.drop_column('event_category_id')
        batch_op.drop_column('event_type_id')
        batch_op.drop_column('phase_id')

    with op.batch_alter_table('outcomes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('outcomes_milestone_id_fkey', 'milestones', ['milestone_id'], ['id'])
        batch_op.drop_column('event_category_id')
        batch_op.drop_column('event_type_id')
        batch_op.drop_column('phase_id')

    with op.batch_alter_table('events_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('topic', sa.VARCHAR(length=2000), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('anticipated_end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('decision_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('oh_attendance', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('anticipated_start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_reportable', sa.BOOLEAN(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('decision_information', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('events_history_decision_by_id_fkey', 'staffs', ['decision_by_id'], ['id'])
        batch_op.create_foreign_key('events_history_milestone_id_fkey', 'milestones', ['milestone_id'], ['id'])
        batch_op.drop_column('source_event_id')
        batch_op.drop_column('number_of_days')
        batch_op.drop_column('actual_date')
        batch_op.drop_column('anticipated_date')
        batch_op.drop_column('event_type_id')
        batch_op.drop_column('event_category_id')
        batch_op.drop_column('phase_id')
        batch_op.drop_column('name')

    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.add_column(sa.Column('topic', sa.VARCHAR(length=2000), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('anticipated_end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('decision_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('oh_attendance', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('anticipated_start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_reportable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('decision_information', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('events_milestone_id_fkey', 'milestones', ['milestone_id'], ['id'])
        batch_op.create_foreign_key('events_decision_by_id_fkey', 'staffs', ['decision_by_id'], ['id'])
        batch_op.drop_column('source_event_id')
        batch_op.drop_column('number_of_days')
        batch_op.drop_column('actual_date')
        batch_op.drop_column('anticipated_date')
        batch_op.drop_column('event_type_id')
        batch_op.drop_column('event_category_id')
        batch_op.drop_column('phase_id')
        batch_op.drop_column('name')

    with op.batch_alter_table('event_templates_history', schema=None) as batch_op:
        batch_op.alter_column('start_at',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=False)
        batch_op.drop_column('parent_template_id')

    with op.batch_alter_table('event_templates', schema=None) as batch_op:
        batch_op.alter_column('start_at',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
        batch_op.drop_column('parent_template_id')

    # ### end Alembic commands ###
